
main gate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fc  00800060  000007e6  0000087a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  0080015c  0080015c  00000976  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bfc  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b90  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe3  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  000042fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f9  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f99  00000000  00000000  00004cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005c62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
   2:	49 c2       	rjmp	.+1170   	; 0x496 <__vector_1>
   4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
   6:	3a c0       	rjmp	.+116    	; 0x7c <__bad_interrupt>
   8:	39 c0       	rjmp	.+114    	; 0x7c <__bad_interrupt>
   a:	38 c0       	rjmp	.+112    	; 0x7c <__bad_interrupt>
   c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
   e:	36 c0       	rjmp	.+108    	; 0x7c <__bad_interrupt>
  10:	a7 c3       	rjmp	.+1870   	; 0x760 <__vector_8>
  12:	34 c0       	rjmp	.+104    	; 0x7c <__bad_interrupt>
  14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
  16:	32 c0       	rjmp	.+100    	; 0x7c <__bad_interrupt>
  18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
  1a:	30 c0       	rjmp	.+96     	; 0x7c <__bad_interrupt>
  1c:	2f c0       	rjmp	.+94     	; 0x7c <__bad_interrupt>
  1e:	2e c0       	rjmp	.+92     	; 0x7c <__bad_interrupt>
  20:	2d c0       	rjmp	.+90     	; 0x7c <__bad_interrupt>
  22:	2c c0       	rjmp	.+88     	; 0x7c <__bad_interrupt>
  24:	2b c0       	rjmp	.+86     	; 0x7c <__bad_interrupt>
  26:	0d c1       	rjmp	.+538    	; 0x242 <KeyPad_getPressedKey+0x5a>
  28:	ee c0       	rjmp	.+476    	; 0x206 <KeyPad_getPressedKey+0x1e>
  2a:	ef c0       	rjmp	.+478    	; 0x20a <KeyPad_getPressedKey+0x22>
  2c:	f0 c0       	rjmp	.+480    	; 0x20e <KeyPad_getPressedKey+0x26>
  2e:	f1 c0       	rjmp	.+482    	; 0x212 <KeyPad_getPressedKey+0x2a>
  30:	f2 c0       	rjmp	.+484    	; 0x216 <KeyPad_getPressedKey+0x2e>
  32:	f3 c0       	rjmp	.+486    	; 0x21a <KeyPad_getPressedKey+0x32>
  34:	f4 c0       	rjmp	.+488    	; 0x21e <KeyPad_getPressedKey+0x36>
  36:	f5 c0       	rjmp	.+490    	; 0x222 <KeyPad_getPressedKey+0x3a>
  38:	f6 c0       	rjmp	.+492    	; 0x226 <KeyPad_getPressedKey+0x3e>
  3a:	f7 c0       	rjmp	.+494    	; 0x22a <KeyPad_getPressedKey+0x42>
  3c:	f8 c0       	rjmp	.+496    	; 0x22e <KeyPad_getPressedKey+0x46>
  3e:	f9 c0       	rjmp	.+498    	; 0x232 <KeyPad_getPressedKey+0x4a>
  40:	fa c0       	rjmp	.+500    	; 0x236 <KeyPad_getPressedKey+0x4e>
  42:	fb c0       	rjmp	.+502    	; 0x23a <KeyPad_getPressedKey+0x52>
  44:	fc c0       	rjmp	.+504    	; 0x23e <KeyPad_getPressedKey+0x56>

00000046 <__ctors_end>:
  46:	11 24       	eor	r1, r1
  48:	1f be       	out	0x3f, r1	; 63
  4a:	cf e5       	ldi	r28, 0x5F	; 95
  4c:	d4 e0       	ldi	r29, 0x04	; 4
  4e:	de bf       	out	0x3e, r29	; 62
  50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
  52:	11 e0       	ldi	r17, 0x01	; 1
  54:	a0 e6       	ldi	r26, 0x60	; 96
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	e6 ee       	ldi	r30, 0xE6	; 230
  5a:	f7 e0       	ldi	r31, 0x07	; 7
  5c:	02 c0       	rjmp	.+4      	; 0x62 <__do_copy_data+0x10>
  5e:	05 90       	lpm	r0, Z+
  60:	0d 92       	st	X+, r0
  62:	ac 35       	cpi	r26, 0x5C	; 92
  64:	b1 07       	cpc	r27, r17
  66:	d9 f7       	brne	.-10     	; 0x5e <__do_copy_data+0xc>

00000068 <__do_clear_bss>:
  68:	21 e0       	ldi	r18, 0x01	; 1
  6a:	ac e5       	ldi	r26, 0x5C	; 92
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	ac 39       	cpi	r26, 0x9C	; 156
  74:	b2 07       	cpc	r27, r18
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	f0 d1       	rcall	.+992    	; 0x45a <main>
  7a:	b3 c3       	rjmp	.+1894   	; 0x7e2 <_exit>

0000007c <__bad_interrupt>:
  7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <EEPROM_write>:

/* EEPROM write Byte into EEPROM at specific address */
void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{	
	/* Wait for completion of previous write */
	while(!BIT_IS_CLEAR(EECR,EEWE));
  7e:	e1 99       	sbic	0x1c, 1	; 28
  80:	fe cf       	rjmp	.-4      	; 0x7e <EEPROM_write>
	//while(!BIT_IS_CLEAR(SPMCR,SPMEN)); // wait if MCU storing program  => unnecessary to written here 
	
	/* Set up address and data registers */
	EEAR = uiAddress;
  82:	9f bb       	out	0x1f, r25	; 31
  84:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  86:	6d bb       	out	0x1d, r22	; 29

	/* Write logical one to EEMWE */
	SET_BIT(EECR,EEMWE);
  88:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	SET_BIT(EECR,EEWE);
  8a:	e1 9a       	sbi	0x1c, 1	; 28
  8c:	08 95       	ret

0000008e <EEPROM_read>:

/* EEPROM read Byte from EEPROM at specific address */
uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(!BIT_IS_CLEAR(EECR,EEWE));
  8e:	e1 99       	sbic	0x1c, 1	; 28
  90:	fe cf       	rjmp	.-4      	; 0x8e <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
  92:	9f bb       	out	0x1f, r25	; 31
  94:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	SET_BIT(EECR,EERE);
  96:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
  98:	8d b3       	in	r24, 0x1d	; 29
}
  9a:	08 95       	ret

0000009c <EEPROM_WriteNByte>:


/* EEPROM write N number of Bytes into EEPROM at specific address */
void EEPROM_WriteNByte(uint16_t uiAddress, uint8_t *ucData,uint16_t uiNumberOfBytes)
{
  9c:	ef 92       	push	r14
  9e:	ff 92       	push	r15
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	8c 01       	movw	r16, r24
  aa:	7b 01       	movw	r14, r22
  ac:	ea 01       	movw	r28, r20
	
	while(uiNumberOfBytes!=0){
  ae:	20 97       	sbiw	r28, 0x00	; 0
  b0:	49 f0       	breq	.+18     	; 0xc4 <EEPROM_WriteNByte+0x28>
		EEPROM_write(uiAddress,*ucData);
  b2:	f7 01       	movw	r30, r14
  b4:	61 91       	ld	r22, Z+
  b6:	7f 01       	movw	r14, r30
  b8:	c8 01       	movw	r24, r16
  ba:	e1 df       	rcall	.-62     	; 0x7e <EEPROM_write>
		ucData++;
		uiAddress++;
  bc:	0f 5f       	subi	r16, 0xFF	; 255
  be:	1f 4f       	sbci	r17, 0xFF	; 255
		uiNumberOfBytes--;
  c0:	21 97       	sbiw	r28, 0x01	; 1

/* EEPROM write N number of Bytes into EEPROM at specific address */
void EEPROM_WriteNByte(uint16_t uiAddress, uint8_t *ucData,uint16_t uiNumberOfBytes)
{
	
	while(uiNumberOfBytes!=0){
  c2:	b9 f7       	brne	.-18     	; 0xb2 <EEPROM_WriteNByte+0x16>
		ucData++;
		uiAddress++;
		uiNumberOfBytes--;
	}
	
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
  cc:	ff 90       	pop	r15
  ce:	ef 90       	pop	r14
  d0:	08 95       	ret

000000d2 <EEPROM_readNByte>:
/* EEPROM read N number of Bytes from EEPROM at specific address and copy it into ucDataRam pointer */

void EEPROM_readNByte(uint16_t uiAddress,uint8_t *ucDataRam,uint16_t uiNumberOfBytes){
  d2:	af 92       	push	r10
  d4:	bf 92       	push	r11
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
  e8:	5b 01       	movw	r10, r22
  ea:	6a 01       	movw	r12, r20
	int i=uiNumberOfBytes;
	while (uiNumberOfBytes!=0){
  ec:	41 15       	cp	r20, r1
  ee:	51 05       	cpc	r21, r1
  f0:	69 f0       	breq	.+26     	; 0x10c <EEPROM_readNByte+0x3a>
  f2:	8a 01       	movw	r16, r20
  f4:	7b 01       	movw	r14, r22
		*ucDataRam=EEPROM_read(uiAddress);
  f6:	ce 01       	movw	r24, r28
  f8:	ca df       	rcall	.-108    	; 0x8e <EEPROM_read>
  fa:	f7 01       	movw	r30, r14
  fc:	81 93       	st	Z+, r24
  fe:	7f 01       	movw	r14, r30
		uiAddress++;
 100:	21 96       	adiw	r28, 0x01	; 1
		ucDataRam++;
		uiNumberOfBytes--;
 102:	01 50       	subi	r16, 0x01	; 1
 104:	11 09       	sbc	r17, r1
}
/* EEPROM read N number of Bytes from EEPROM at specific address and copy it into ucDataRam pointer */

void EEPROM_readNByte(uint16_t uiAddress,uint8_t *ucDataRam,uint16_t uiNumberOfBytes){
	int i=uiNumberOfBytes;
	while (uiNumberOfBytes!=0){
 106:	b9 f7       	brne	.-18     	; 0xf6 <EEPROM_readNByte+0x24>
 108:	ac 0c       	add	r10, r12
 10a:	bd 1c       	adc	r11, r13
		*ucDataRam=EEPROM_read(uiAddress);
		uiAddress++;
		ucDataRam++;
		uiNumberOfBytes--;
	}
ucDataRam[i]='\0';
 10c:	f5 01       	movw	r30, r10
 10e:	ec 0d       	add	r30, r12
 110:	fd 1d       	adc	r31, r13
 112:	10 82       	st	Z, r1
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	ff 90       	pop	r15
 11e:	ef 90       	pop	r14
 120:	df 90       	pop	r13
 122:	cf 90       	pop	r12
 124:	bf 90       	pop	r11
 126:	af 90       	pop	r10
 128:	08 95       	ret

0000012a <get_stored_password>:

#include "function.h"
#include "lcd.h"
#include "EEPROM.h"
#include "pins.h"
void get_stored_password(uint8_t* pass){
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	8c 01       	movw	r16, r24
	
	char len = EEPROM_read(passLenAddr);
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	aa df       	rcall	.-172    	; 0x8e <EEPROM_read>
	EEPROM_readNByte(passAddrLoc,(uint8_t*)pass,len);
 13a:	c8 2f       	mov	r28, r24
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	ae 01       	movw	r20, r28
 140:	b8 01       	movw	r22, r16
 142:	85 e1       	ldi	r24, 0x15	; 21
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	c5 df       	rcall	.-118    	; 0xd2 <EEPROM_readNByte>
	pass[len]='\0';
 148:	c0 0f       	add	r28, r16
 14a:	d1 1f       	adc	r29, r17
 14c:	18 82       	st	Y, r1

}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <initpassword>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f e7       	ldi	r18, 0x7F	; 127
 15a:	8a e1       	ldi	r24, 0x1A	; 26
 15c:	96 e0       	ldi	r25, 0x06	; 6
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <initpassword+0x6>
 166:	00 c0       	rjmp	.+0      	; 0x168 <initpassword+0x10>
 168:	00 00       	nop

int initpassword()
{
	_delay_ms(2000); // wait for check new password update

	if (BIT_IS_SET(PIND,PD5))	return 0; // if pin is set change nothing if not return 1 to change password
 16a:	85 99       	sbic	0x10, 5	; 16
 16c:	0c c0       	rjmp	.+24     	; 0x186 <initpassword+0x2e>
	
	LCD_clearScreen();
 16e:	26 d1       	rcall	.+588    	; 0x3bc <LCD_clearScreen>
	LCD_displayString("press any key");
 170:	80 e6       	ldi	r24, 0x60	; 96
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	fd d0       	rcall	.+506    	; 0x370 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"to change pass");
 176:	4e e6       	ldi	r20, 0x6E	; 110
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	15 d1       	rcall	.+554    	; 0x3aa <LCD_displayStringRowColumn>
	return 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	08 95       	ret

int initpassword()
{
	_delay_ms(2000); // wait for check new password update

	if (BIT_IS_SET(PIND,PD5))	return 0; // if pin is set change nothing if not return 1 to change password
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
	
	LCD_clearScreen();
	LCD_displayString("press any key");
	LCD_displayStringRowColumn(1,0,"to change pass");
	return 1;
}
 18a:	08 95       	ret

0000018c <open_gate>:

void open_gate()
{
	SET_BIT(gateLockPORT,gateLockP);
 18c:	96 9a       	sbi	0x12, 6	; 18
 18e:	2f e7       	ldi	r18, 0x7F	; 127
 190:	8a e1       	ldi	r24, 0x1A	; 26
 192:	96 e0       	ldi	r25, 0x06	; 6
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <open_gate+0x8>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <open_gate+0x12>
 19e:	00 00       	nop
	_delay_ms(2000);
	CLEAR_BIT(gateLockPORT,gateLockP);
 1a0:	96 98       	cbi	0x12, 6	; 18
 1a2:	08 95       	ret

000001a4 <alarm>:
	
}

void alarm()
{
	SET_BIT(buzzerPORT,buzzerP);
 1a4:	97 9a       	sbi	0x12, 7	; 18
 1a6:	2f ed       	ldi	r18, 0xDF	; 223
 1a8:	83 e9       	ldi	r24, 0x93	; 147
 1aa:	94 e0       	ldi	r25, 0x04	; 4
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <alarm+0x8>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <alarm+0x12>
 1b6:	00 00       	nop
	_delay_ms(1500);
	CLEAR_BIT(buzzerPORT,buzzerP);	
 1b8:	97 98       	cbi	0x12, 7	; 18
 1ba:	08 95       	ret

000001bc <buzz>:
}

void buzz()
{
	SET_BIT(buzzerPORT,buzzerP);
 1bc:	97 9a       	sbi	0x12, 7	; 18
 1be:	87 ea       	ldi	r24, 0xA7	; 167
 1c0:	91 e6       	ldi	r25, 0x61	; 97
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <buzz+0x6>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <buzz+0xc>
 1c8:	00 00       	nop
	_delay_ms(100);
	CLEAR_BIT(buzzerPORT,buzzerP);
 1ca:	97 98       	cbi	0x12, 7	; 18
 1cc:	08 95       	ret

000001ce <MCU_power_down>:
}

void MCU_power_down(){
	SET_BIT(MCUCR,SE);
 1ce:	85 b7       	in	r24, 0x35	; 53
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	85 bf       	out	0x35, r24	; 53
	//SM0..2 010 for power_down mode
	CLEAR_BIT(MCUCR,SM0);
 1d4:	85 b7       	in	r24, 0x35	; 53
 1d6:	8f 7e       	andi	r24, 0xEF	; 239
 1d8:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,SM1);
 1da:	85 b7       	in	r24, 0x35	; 53
 1dc:	80 62       	ori	r24, 0x20	; 32
 1de:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR,SM2);
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	8f 7b       	andi	r24, 0xBF	; 191
 1e4:	85 bf       	out	0x35, r24	; 53
 1e6:	08 95       	ret

000001e8 <KeyPad_getPressedKey>:
			}
		}
	}
	#else // WITH_IC_74922 == 1
	#ifdef KEY_PAD_IC_MASK
	return KeyPad_4x4_withIC74922 ( ((KEYPAD_PORT_IN & KEY_PAD_IC_MASK)>>2) + 1 );
 1e8:	86 b3       	in	r24, 0x16	; 22
 1ea:	8c 73       	andi	r24, 0x3C	; 60
 1ec:	86 95       	lsr	r24
 1ee:	86 95       	lsr	r24
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
// if we are using ic 74922
#else

static uint8_t KeyPad_4x4_withIC74922(uint8_t button_number)
{
	switch(button_number)
 1f2:	48 2f       	mov	r20, r24
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	fa 01       	movw	r30, r20
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	e0 31       	cpi	r30, 0x10	; 16
 1fc:	f1 05       	cpc	r31, r1
 1fe:	10 f5       	brcc	.+68     	; 0x244 <KeyPad_getPressedKey+0x5c>
 200:	ed 5e       	subi	r30, 0xED	; 237
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	09 94       	ijmp
	{
		case 1: return '1';
		break;
		case 2: return '2';
 206:	82 e3       	ldi	r24, 0x32	; 50
 208:	08 95       	ret
		break;
		case 3: return '3';
 20a:	83 e3       	ldi	r24, 0x33	; 51
 20c:	08 95       	ret
		break;
		case 4: return 'a'; /* ASCII Code of 'a' */
 20e:	81 e6       	ldi	r24, 0x61	; 97
 210:	08 95       	ret
		break;
		case 5: return '4';
 212:	84 e3       	ldi	r24, 0x34	; 52
 214:	08 95       	ret
		break;
		case 6: return '5';
 216:	85 e3       	ldi	r24, 0x35	; 53
 218:	08 95       	ret
		break;
		case 7: return '6';
 21a:	86 e3       	ldi	r24, 0x36	; 54
 21c:	08 95       	ret
		break;
		case 8: return 'b'; /* ASCII Code of 'b' */
 21e:	82 e6       	ldi	r24, 0x62	; 98
 220:	08 95       	ret
		break;
		case 9: return '7';
 222:	87 e3       	ldi	r24, 0x37	; 55
 224:	08 95       	ret
		break;
		case 10: return '8';
 226:	88 e3       	ldi	r24, 0x38	; 56
 228:	08 95       	ret
		break;
		case 11: return '9';
 22a:	89 e3       	ldi	r24, 0x39	; 57
 22c:	08 95       	ret
		break;
		case 12: return 'c'; /* ASCII Code of 'c' */
 22e:	83 e6       	ldi	r24, 0x63	; 99
 230:	08 95       	ret
		break;
		case 13: return '*';  /* ASCII of '*' */
 232:	8a e2       	ldi	r24, 0x2A	; 42
 234:	08 95       	ret
		break;
		case 14: return '0';
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	08 95       	ret
		break;
		case 15: return '#'; /* ASCII Code of '#' */
 23a:	83 e2       	ldi	r24, 0x23	; 35
 23c:	08 95       	ret
		break;
		case 16: return 'd'; /* ASCII Code of 'd' */
 23e:	84 e6       	ldi	r24, 0x64	; 100
 240:	08 95       	ret

static uint8_t KeyPad_4x4_withIC74922(uint8_t button_number)
{
	switch(button_number)
	{
		case 1: return '1';
 242:	81 e3       	ldi	r24, 0x31	; 49
	//write code for lower pins here
	
	#endif // end if we use upper pins
	
	#endif // end if we use IC
}
 244:	08 95       	ret

00000246 <LCD_sendCommand>:
void LCD_intgerToString(int data)
{
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* itoa convert int to char, 10 for decimal */
	LCD_displayString(buff);
}
 246:	90 98       	cbi	0x12, 0	; 18
 248:	e9 ef       	ldi	r30, 0xF9	; 249
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	31 97       	sbiw	r30, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_sendCommand+0x6>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_sendCommand+0xc>
 252:	00 00       	nop
 254:	91 9a       	sbi	0x12, 1	; 18
 256:	e9 ef       	ldi	r30, 0xF9	; 249
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_sendCommand+0x14>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_sendCommand+0x1a>
 260:	00 00       	nop
 262:	95 b3       	in	r25, 0x15	; 21
 264:	15 ba       	out	0x15, r1	; 21
 266:	95 b3       	in	r25, 0x15	; 21
 268:	28 2f       	mov	r18, r24
 26a:	22 95       	swap	r18
 26c:	2f 70       	andi	r18, 0x0F	; 15
 26e:	92 2b       	or	r25, r18
 270:	95 bb       	out	0x15, r25	; 21
 272:	e9 ef       	ldi	r30, 0xF9	; 249
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	31 97       	sbiw	r30, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_sendCommand+0x30>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_sendCommand+0x36>
 27c:	00 00       	nop
 27e:	91 98       	cbi	0x12, 1	; 18
 280:	e9 ef       	ldi	r30, 0xF9	; 249
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	31 97       	sbiw	r30, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <LCD_sendCommand+0x3e>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCD_sendCommand+0x44>
 28a:	00 00       	nop
 28c:	91 9a       	sbi	0x12, 1	; 18
 28e:	e9 ef       	ldi	r30, 0xF9	; 249
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_sendCommand+0x4c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_sendCommand+0x52>
 298:	00 00       	nop
 29a:	95 b3       	in	r25, 0x15	; 21
 29c:	15 ba       	out	0x15, r1	; 21
 29e:	95 b3       	in	r25, 0x15	; 21
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	89 2b       	or	r24, r25
 2a4:	85 bb       	out	0x15, r24	; 21
 2a6:	89 ef       	ldi	r24, 0xF9	; 249
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_sendCommand+0x64>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_sendCommand+0x6a>
 2b0:	00 00       	nop
 2b2:	91 98       	cbi	0x12, 1	; 18
 2b4:	e9 ef       	ldi	r30, 0xF9	; 249
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_sendCommand+0x72>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_sendCommand+0x78>
 2be:	00 00       	nop
 2c0:	08 95       	ret

000002c2 <LCD_init>:
 2c2:	b9 9a       	sbi	0x17, 1	; 23
 2c4:	c1 9a       	sbi	0x18, 1	; 24
 2c6:	83 ed       	ldi	r24, 0xD3	; 211
 2c8:	90 e3       	ldi	r25, 0x30	; 48
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_init+0x8>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_init+0xe>
 2d0:	00 00       	nop
 2d2:	81 b3       	in	r24, 0x11	; 17
 2d4:	83 60       	ori	r24, 0x03	; 3
 2d6:	81 bb       	out	0x11, r24	; 17
 2d8:	84 b3       	in	r24, 0x14	; 20
 2da:	8f 60       	ori	r24, 0x0F	; 15
 2dc:	84 bb       	out	0x14, r24	; 20
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	b2 df       	rcall	.-156    	; 0x246 <LCD_sendCommand>
 2e2:	88 e2       	ldi	r24, 0x28	; 40
 2e4:	b0 df       	rcall	.-160    	; 0x246 <LCD_sendCommand>
 2e6:	8c e0       	ldi	r24, 0x0C	; 12
 2e8:	ae df       	rcall	.-164    	; 0x246 <LCD_sendCommand>
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	ac df       	rcall	.-168    	; 0x246 <LCD_sendCommand>
 2ee:	8c e0       	ldi	r24, 0x0C	; 12
 2f0:	aa df       	rcall	.-172    	; 0x246 <LCD_sendCommand>
 2f2:	08 95       	ret

000002f4 <LCD_displayCharacter>:
 2f4:	90 9a       	sbi	0x12, 0	; 18
 2f6:	e9 ef       	ldi	r30, 0xF9	; 249
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_displayCharacter+0x6>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_displayCharacter+0xc>
 300:	00 00       	nop
 302:	91 9a       	sbi	0x12, 1	; 18
 304:	e9 ef       	ldi	r30, 0xF9	; 249
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_displayCharacter+0x14>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_displayCharacter+0x1a>
 30e:	00 00       	nop
 310:	95 b3       	in	r25, 0x15	; 21
 312:	15 ba       	out	0x15, r1	; 21
 314:	95 b3       	in	r25, 0x15	; 21
 316:	28 2f       	mov	r18, r24
 318:	22 95       	swap	r18
 31a:	2f 70       	andi	r18, 0x0F	; 15
 31c:	92 2b       	or	r25, r18
 31e:	95 bb       	out	0x15, r25	; 21
 320:	e9 ef       	ldi	r30, 0xF9	; 249
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCD_displayCharacter+0x30>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_displayCharacter+0x36>
 32a:	00 00       	nop
 32c:	91 98       	cbi	0x12, 1	; 18
 32e:	e9 ef       	ldi	r30, 0xF9	; 249
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCD_displayCharacter+0x3e>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LCD_displayCharacter+0x44>
 338:	00 00       	nop
 33a:	91 9a       	sbi	0x12, 1	; 18
 33c:	e9 ef       	ldi	r30, 0xF9	; 249
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_displayCharacter+0x4c>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_displayCharacter+0x52>
 346:	00 00       	nop
 348:	95 b3       	in	r25, 0x15	; 21
 34a:	15 ba       	out	0x15, r1	; 21
 34c:	95 b3       	in	r25, 0x15	; 21
 34e:	8f 70       	andi	r24, 0x0F	; 15
 350:	89 2b       	or	r24, r25
 352:	85 bb       	out	0x15, r24	; 21
 354:	89 ef       	ldi	r24, 0xF9	; 249
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <LCD_displayCharacter+0x64>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_displayCharacter+0x6a>
 35e:	00 00       	nop
 360:	91 98       	cbi	0x12, 1	; 18
 362:	e9 ef       	ldi	r30, 0xF9	; 249
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <LCD_displayCharacter+0x72>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <LCD_displayCharacter+0x78>
 36c:	00 00       	nop
 36e:	08 95       	ret

00000370 <LCD_displayString>:
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	ec 01       	movw	r28, r24
 376:	88 81       	ld	r24, Y
 378:	88 23       	and	r24, r24
 37a:	29 f0       	breq	.+10     	; 0x386 <LCD_displayString+0x16>
 37c:	21 96       	adiw	r28, 0x01	; 1
 37e:	ba df       	rcall	.-140    	; 0x2f4 <LCD_displayCharacter>
 380:	89 91       	ld	r24, Y+
 382:	81 11       	cpse	r24, r1
 384:	fc cf       	rjmp	.-8      	; 0x37e <LCD_displayString+0xe>
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <LCD_goToRowColumn>:
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	31 f0       	breq	.+12     	; 0x39c <LCD_goToRowColumn+0x10>
 390:	83 30       	cpi	r24, 0x03	; 3
 392:	31 f0       	breq	.+12     	; 0x3a0 <LCD_goToRowColumn+0x14>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	29 f4       	brne	.+10     	; 0x3a2 <LCD_goToRowColumn+0x16>
 398:	60 5c       	subi	r22, 0xC0	; 192
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <LCD_goToRowColumn+0x16>
 39c:	60 5f       	subi	r22, 0xF0	; 240
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <LCD_goToRowColumn+0x16>
 3a0:	60 5b       	subi	r22, 0xB0	; 176
 3a2:	86 2f       	mov	r24, r22
 3a4:	80 68       	ori	r24, 0x80	; 128
 3a6:	4f df       	rcall	.-354    	; 0x246 <LCD_sendCommand>
 3a8:	08 95       	ret

000003aa <LCD_displayStringRowColumn>:
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	ea 01       	movw	r28, r20
 3b0:	ed df       	rcall	.-38     	; 0x38c <LCD_goToRowColumn>
 3b2:	ce 01       	movw	r24, r28
 3b4:	dd df       	rcall	.-70     	; 0x370 <LCD_displayString>
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <LCD_clearScreen>:



void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	43 df       	rcall	.-378    	; 0x246 <LCD_sendCommand>
 3c0:	08 95       	ret

000003c2 <LCD_power_off>:
}

void LCD_power_off()
{
	LCD_sendCommand(DISPLAY_OFF);
 3c2:	88 e0       	ldi	r24, 0x08	; 8
 3c4:	40 df       	rcall	.-384    	; 0x246 <LCD_sendCommand>
	PORTC &=!(0x0f);
 3c6:	85 b3       	in	r24, 0x15	; 21
 3c8:	15 ba       	out	0x15, r1	; 21
	PORTD &=!(0x03);
 3ca:	82 b3       	in	r24, 0x12	; 18
 3cc:	12 ba       	out	0x12, r1	; 18
	CLEAR_BIT(LCD_POWER_PORT,LCD_POWER_P);
 3ce:	c1 98       	cbi	0x18, 1	; 24
 3d0:	08 95       	ret

000003d2 <LCD_power_on>:
	
}

void LCD_power_on()
{
	LCD_init();
 3d2:	77 df       	rcall	.-274    	; 0x2c2 <LCD_init>
 3d4:	08 95       	ret

000003d6 <init_pins>:
#include "pins.h"


void init_pins(){

	SET_BIT(gateLockDIR,gateLockP);//set gate lock pin to output
 3d6:	8e 9a       	sbi	0x11, 6	; 17
	CLEAR_BIT(gateLockPORT,gateLockP); // enable pull up resistor on gate lock pin
 3d8:	96 98       	cbi	0x12, 6	; 18
	
	SET_BIT(buzzerDIR,buzzerP);
 3da:	8f 9a       	sbi	0x11, 7	; 17
	CLEAR_BIT(buzzerPORT,buzzerP);
 3dc:	97 98       	cbi	0x12, 7	; 18
	
	
	
	
	CLEAR_BIT(DDRD,PD2); // set PD2 INT0 as input
 3de:	8a 98       	cbi	0x11, 2	; 17
	
	CLEAR_BIT(DDRD,PD5);	// pin of reset password as input 
 3e0:	8d 98       	cbi	0x11, 5	; 17
	SET_BIT(PORTD,PD5);		// 
 3e2:	95 9a       	sbi	0x12, 5	; 18
 3e4:	08 95       	ret

000003e6 <init_TMR1>:


void init_TMR1()
{
	// TMR1 operate on normal mode
	CLEAR_BIT(TCCR1A,WGM10);
 3e6:	8f b5       	in	r24, 0x2f	; 47
 3e8:	8e 7f       	andi	r24, 0xFE	; 254
 3ea:	8f bd       	out	0x2f, r24	; 47
	CLEAR_BIT(TCCR1A,WGM11);
 3ec:	8f b5       	in	r24, 0x2f	; 47
 3ee:	8d 7f       	andi	r24, 0xFD	; 253
 3f0:	8f bd       	out	0x2f, r24	; 47
	CLEAR_BIT(TCCR1B,WGM12);
 3f2:	8e b5       	in	r24, 0x2e	; 46
 3f4:	87 7f       	andi	r24, 0xF7	; 247
 3f6:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B,WGM13);
 3f8:	8e b5       	in	r24, 0x2e	; 46
 3fa:	8f 7e       	andi	r24, 0xEF	; 239
 3fc:	8e bd       	out	0x2e, r24	; 46
	//select clock and prescaler 1024
	CLEAR_BIT(TCCR1B,CS10);
 3fe:	8e b5       	in	r24, 0x2e	; 46
 400:	8e 7f       	andi	r24, 0xFE	; 254
 402:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B,CS11);
 404:	8e b5       	in	r24, 0x2e	; 46
 406:	8d 7f       	andi	r24, 0xFD	; 253
 408:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS12);
 40a:	8e b5       	in	r24, 0x2e	; 46
 40c:	84 60       	ori	r24, 0x04	; 4
 40e:	8e bd       	out	0x2e, r24	; 46
	
	TCNT1=1;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	9d bd       	out	0x2d, r25	; 45
 416:	8c bd       	out	0x2c, r24	; 44
	SET_BIT(TIFR,TOV1);//clear timer1 flag
 418:	88 b7       	in	r24, 0x38	; 56
 41a:	84 60       	ori	r24, 0x04	; 4
 41c:	88 bf       	out	0x38, r24	; 56
	
	SET_BIT(TIMSK,TOIE1); // enable interrupt of timer1 overflow
 41e:	89 b7       	in	r24, 0x39	; 57
 420:	84 60       	ori	r24, 0x04	; 4
 422:	89 bf       	out	0x39, r24	; 57
 424:	08 95       	ret

00000426 <TIMER1_sleep>:
}

void TIMER1_sleep()
{
	// no clock stop timer
	CLEAR_BIT(TCCR1B,CS10);
 426:	8e b5       	in	r24, 0x2e	; 46
 428:	8e 7f       	andi	r24, 0xFE	; 254
 42a:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B,CS11);
 42c:	8e b5       	in	r24, 0x2e	; 46
 42e:	8d 7f       	andi	r24, 0xFD	; 253
 430:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B,CS12);
 432:	8e b5       	in	r24, 0x2e	; 46
 434:	8b 7f       	andi	r24, 0xFB	; 251
 436:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TIMSK,TOIE1); // enable interrupt of timer1 overflow
 438:	89 b7       	in	r24, 0x39	; 57
 43a:	8b 7f       	andi	r24, 0xFB	; 251
 43c:	89 bf       	out	0x39, r24	; 57
 43e:	08 95       	ret

00000440 <TIMER1_start>:
}


void TIMER1_start(){
	//select clock and prescaler 1024
	CLEAR_BIT(TCCR1B,CS10);
 440:	8e b5       	in	r24, 0x2e	; 46
 442:	8e 7f       	andi	r24, 0xFE	; 254
 444:	8e bd       	out	0x2e, r24	; 46
	CLEAR_BIT(TCCR1B,CS11);
 446:	8e b5       	in	r24, 0x2e	; 46
 448:	8d 7f       	andi	r24, 0xFD	; 253
 44a:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS12);
 44c:	8e b5       	in	r24, 0x2e	; 46
 44e:	84 60       	ori	r24, 0x04	; 4
 450:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TIMSK,TOIE1); // enable interrupt of timer1 overflow
 452:	89 b7       	in	r24, 0x39	; 57
 454:	84 60       	ori	r24, 0x04	; 4
 456:	89 bf       	out	0x39, r24	; 57
 458:	08 95       	ret

0000045a <main>:
uint16_t counter=0;

int main(void)
{
	//init INT 0 for keypad
	cli();
 45a:	f8 94       	cli
	//set bits ISC00,01 for rising edge int0 and PD2 as input
	SET_BIT(MCUCR,ISC00);
 45c:	85 b7       	in	r24, 0x35	; 53
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC01);
 462:	85 b7       	in	r24, 0x35	; 53
 464:	82 60       	ori	r24, 0x02	; 2
 466:	85 bf       	out	0x35, r24	; 53
	SET_BIT(GICR,INT0);
 468:	8b b7       	in	r24, 0x3b	; 59
 46a:	80 64       	ori	r24, 0x40	; 64
 46c:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GIFR,INTF0); // clear flag by setting 1 to it
 46e:	8a b7       	in	r24, 0x3a	; 58
 470:	80 64       	ori	r24, 0x40	; 64
 472:	8a bf       	out	0x3a, r24	; 58
	sei();
 474:	78 94       	sei

	init_pins();
 476:	af df       	rcall	.-162    	; 0x3d6 <init_pins>
	LCD_init();
 478:	24 df       	rcall	.-440    	; 0x2c2 <LCD_init>
	LCD_displayString("Initiate lock");
 47a:	8d e7       	ldi	r24, 0x7D	; 125
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	78 df       	rcall	.-272    	; 0x370 <LCD_displayString>
	pass_flag=initpassword();
 480:	6b de       	rcall	.-810    	; 0x158 <initpassword>
 482:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
 486:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>

	init_TMR1();
 48a:	ad df       	rcall	.-166    	; 0x3e6 <init_TMR1>
	/* Replace with your application code */
	LCD_clearScreen();
 48c:	97 df       	rcall	.-210    	; 0x3bc <LCD_clearScreen>
	LCD_displayString("SYS Starts");
 48e:	8b e8       	ldi	r24, 0x8B	; 139
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	6e df       	rcall	.-292    	; 0x370 <LCD_displayString>
 494:	ff cf       	rjmp	.-2      	; 0x494 <__stack+0x35>

00000496 <__vector_1>:
}


// ISR for INT0 when keypad pressed
ISR(INT0_vect)
{
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	ef 93       	push	r30
 4be:	ff 93       	push	r31
	buzz();
 4c0:	7d de       	rcall	.-774    	; 0x1bc <buzz>
	
	LCD_power_on();
 4c2:	87 df       	rcall	.-242    	; 0x3d2 <LCD_power_on>
	TIMER1_reset();
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	9d bd       	out	0x2d, r25	; 45
 4ca:	8c bd       	out	0x2c, r24	; 44
	TIMER1_start();
 4cc:	b9 df       	rcall	.-142    	; 0x440 <TIMER1_start>
	if(0==pass_flag)
 4ce:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 4d2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 4d6:	89 2b       	or	r24, r25
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__vector_1+0x46>
 4da:	8a c0       	rjmp	.+276    	; 0x5f0 <__vector_1+0x15a>
	{
	
		LCD_clearScreen();
 4dc:	6f df       	rcall	.-290    	; 0x3bc <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"psswrd is:");
 4de:	46 e9       	ldi	r20, 0x96	; 150
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	61 df       	rcall	.-318    	; 0x3aa <LCD_displayStringRowColumn>
		un.chr=KeyPad_getPressedKey();
 4e8:	7f de       	rcall	.-770    	; 0x1e8 <KeyPad_getPressedKey>
 4ea:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <un>
		
		if ('#'==un.chr) // request password compare
 4ee:	83 32       	cpi	r24, 0x23	; 35
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <__vector_1+0x5e>
 4f2:	5f c0       	rjmp	.+190    	; 0x5b2 <__vector_1+0x11c>
		{
			LCD_goToRowColumn(1,0);
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	49 df       	rcall	.-366    	; 0x38c <LCD_goToRowColumn>
			LCD_displayString("checking password");
 4fa:	81 ea       	ldi	r24, 0xA1	; 161
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	38 df       	rcall	.-400    	; 0x370 <LCD_displayString>
 500:	87 ea       	ldi	r24, 0xA7	; 167
 502:	91 e6       	ldi	r25, 0x61	; 97
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <__vector_1+0x6e>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__vector_1+0x74>
 50a:	00 00       	nop
			_delay_ms(100);
			un.x=0; //clear flag for password testing
 50c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <un+0x1>
 510:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <un>
			get_stored_password((uint8_t*)storedpass);
 514:	84 e7       	ldi	r24, 0x74	; 116
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	08 de       	rcall	.-1008   	; 0x12a <get_stored_password>
			LCD_displayString(storedpass);
 51a:	84 e7       	ldi	r24, 0x74	; 116
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	28 df       	rcall	.-432    	; 0x370 <LCD_displayString>
			LCD_clearScreen();
 520:	4d df       	rcall	.-358    	; 0x3bc <LCD_clearScreen>
			if ( strlen(storedpass) == strlen(password) )
 522:	e4 e7       	ldi	r30, 0x74	; 116
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	01 90       	ld	r0, Z+
 528:	00 20       	and	r0, r0
 52a:	e9 f7       	brne	.-6      	; 0x526 <__vector_1+0x90>
 52c:	31 97       	sbiw	r30, 0x01	; 1
 52e:	cf 01       	movw	r24, r30
 530:	84 57       	subi	r24, 0x74	; 116
 532:	91 40       	sbci	r25, 0x01	; 1
 534:	e0 e6       	ldi	r30, 0x60	; 96
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	01 90       	ld	r0, Z+
 53a:	00 20       	and	r0, r0
 53c:	e9 f7       	brne	.-6      	; 0x538 <__vector_1+0xa2>
 53e:	31 97       	sbiw	r30, 0x01	; 1
 540:	e0 56       	subi	r30, 0x60	; 96
 542:	f1 40       	sbci	r31, 0x01	; 1
 544:	8e 17       	cp	r24, r30
 546:	9f 07       	cpc	r25, r31
 548:	a1 f4       	brne	.+40     	; 0x572 <__vector_1+0xdc>
			{
				un.x++;
 54a:	e8 e8       	ldi	r30, 0x88	; 136
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	c0 81       	ld	r28, Z
 550:	d1 81       	ldd	r29, Z+1	; 0x01
 552:	ce 01       	movw	r24, r28
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	91 83       	std	Z+1, r25	; 0x01
 558:	80 83       	st	Z, r24
				if ( 0 == strcmp(password,storedpass) )
 55a:	64 e7       	ldi	r22, 0x74	; 116
 55c:	71 e0       	ldi	r23, 0x01	; 1
 55e:	80 e6       	ldi	r24, 0x60	; 96
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	36 d1       	rcall	.+620    	; 0x7d0 <strcmp>
 564:	89 2b       	or	r24, r25
 566:	29 f4       	brne	.+10     	; 0x572 <__vector_1+0xdc>
				{
					un.x++;
 568:	22 96       	adiw	r28, 0x02	; 2
 56a:	d0 93 89 01 	sts	0x0189, r29	; 0x800189 <un+0x1>
 56e:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <un>
				}
			}
			
			if ( 2 == un.x )
 572:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <un>
 576:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <un+0x1>
 57a:	02 97       	sbiw	r24, 0x02	; 2
 57c:	51 f4       	brne	.+20     	; 0x592 <__vector_1+0xfc>
			{
				LCD_clearScreen();
 57e:	1e df       	rcall	.-452    	; 0x3bc <LCD_clearScreen>
				LCD_displayString("opening gate");
 580:	83 eb       	ldi	r24, 0xB3	; 179
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	f5 de       	rcall	.-534    	; 0x370 <LCD_displayString>
				open_gate();
 586:	02 de       	rcall	.-1020   	; 0x18c <open_gate>
				TCNT1=65500;
 588:	8c ed       	ldi	r24, 0xDC	; 220
 58a:	9f ef       	ldi	r25, 0xFF	; 255
 58c:	9d bd       	out	0x2d, r25	; 45
 58e:	8c bd       	out	0x2c, r24	; 44
 590:	09 c0       	rjmp	.+18     	; 0x5a4 <__vector_1+0x10e>
			}
			else
			{
				LCD_clearScreen();
 592:	14 df       	rcall	.-472    	; 0x3bc <LCD_clearScreen>
				LCD_displayString("wrong psswrd -_-");
 594:	80 ec       	ldi	r24, 0xC0	; 192
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	eb de       	rcall	.-554    	; 0x370 <LCD_displayString>
				alarm();
 59a:	04 de       	rcall	.-1016   	; 0x1a4 <alarm>
				LCD_clearScreen();
 59c:	0f df       	rcall	.-482    	; 0x3bc <LCD_clearScreen>
				LCD_displayString("etnayl tani -_-");
 59e:	81 ed       	ldi	r24, 0xD1	; 209
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	e6 de       	rcall	.-564    	; 0x370 <LCD_displayString>
			}
			
			//reset password to empty
			passitr=0;
 5a4:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <passitr+0x1>
 5a8:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <passitr>
			password[passitr]='\0';
 5ac:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <password>
 5b0:	c2 c0       	rjmp	.+388    	; 0x736 <__vector_1+0x2a0>
		}
		else // continue password inserting.
		{
			password[passitr++]=un.chr;
 5b2:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <passitr>
 5b6:	50 91 5f 01 	lds	r21, 0x015F	; 0x80015f <passitr+0x1>
 5ba:	9a 01       	movw	r18, r20
 5bc:	2f 5f       	subi	r18, 0xFF	; 255
 5be:	3f 4f       	sbci	r19, 0xFF	; 255
 5c0:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <passitr+0x1>
 5c4:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <passitr>
 5c8:	fa 01       	movw	r30, r20
 5ca:	e0 5a       	subi	r30, 0xA0	; 160
 5cc:	fe 4f       	sbci	r31, 0xFE	; 254
 5ce:	80 83       	st	Z, r24
			password[passitr]='\0';
 5d0:	f9 01       	movw	r30, r18
 5d2:	e0 5a       	subi	r30, 0xA0	; 160
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	10 82       	st	Z, r1
			LCD_clearScreen();
 5d8:	f1 de       	rcall	.-542    	; 0x3bc <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"psswrd is:");
 5da:	46 e9       	ldi	r20, 0x96	; 150
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	e3 de       	rcall	.-570    	; 0x3aa <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,password);
 5e4:	40 e6       	ldi	r20, 0x60	; 96
 5e6:	51 e0       	ldi	r21, 0x01	; 1
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	de de       	rcall	.-580    	; 0x3aa <LCD_displayStringRowColumn>
 5ee:	a3 c0       	rjmp	.+326    	; 0x736 <__vector_1+0x2a0>
		}
	}
	else // setting new password
	{
		cli();
 5f0:	f8 94       	cli
		do
		{
			password[0]='\0';
 5f2:	00 e6       	ldi	r16, 0x60	; 96
 5f4:	11 e0       	ldi	r17, 0x01	; 1
			passitr=0;
			LCD_clearScreen();
			LCD_displayString("enter new psswrd");
			while(BIT_IS_SET(PIND,PD2));// wait to new key pressed
			while(BIT_IS_CLEAR(PIND,PD2));// wait to new key pressed
			while((un.chr=KeyPad_getPressedKey()) != '#')
 5f6:	c8 e8       	ldi	r28, 0x88	; 136
 5f8:	d1 e0       	ldi	r29, 0x01	; 1
	else // setting new password
	{
		cli();
		do
		{
			password[0]='\0';
 5fa:	f8 01       	movw	r30, r16
 5fc:	10 82       	st	Z, r1
			passitr=0;
 5fe:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <passitr+0x1>
 602:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <passitr>
			LCD_clearScreen();
 606:	da de       	rcall	.-588    	; 0x3bc <LCD_clearScreen>
			LCD_displayString("enter new psswrd");
 608:	81 ee       	ldi	r24, 0xE1	; 225
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	b1 de       	rcall	.-670    	; 0x370 <LCD_displayString>
			while(BIT_IS_SET(PIND,PD2));// wait to new key pressed
 60e:	82 99       	sbic	0x10, 2	; 16
 610:	fe cf       	rjmp	.-4      	; 0x60e <__vector_1+0x178>
			while(BIT_IS_CLEAR(PIND,PD2));// wait to new key pressed
 612:	82 9b       	sbis	0x10, 2	; 16
 614:	fe cf       	rjmp	.-4      	; 0x612 <__vector_1+0x17c>
 616:	25 c0       	rjmp	.+74     	; 0x662 <__vector_1+0x1cc>
			while((un.chr=KeyPad_getPressedKey()) != '#')
			{
				password[passitr++]=un.chr;
 618:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <passitr>
 61c:	50 91 5f 01 	lds	r21, 0x015F	; 0x80015f <passitr+0x1>
 620:	9a 01       	movw	r18, r20
 622:	2f 5f       	subi	r18, 0xFF	; 255
 624:	3f 4f       	sbci	r19, 0xFF	; 255
 626:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <passitr+0x1>
 62a:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <passitr>
 62e:	fa 01       	movw	r30, r20
 630:	e0 5a       	subi	r30, 0xA0	; 160
 632:	fe 4f       	sbci	r31, 0xFE	; 254
 634:	80 83       	st	Z, r24
				password[passitr]='\0';
 636:	f9 01       	movw	r30, r18
 638:	e0 5a       	subi	r30, 0xA0	; 160
 63a:	fe 4f       	sbci	r31, 0xFE	; 254
 63c:	10 82       	st	Z, r1
				LCD_clearScreen();
 63e:	be de       	rcall	.-644    	; 0x3bc <LCD_clearScreen>
				LCD_displayString("new password is");
 640:	82 ef       	ldi	r24, 0xF2	; 242
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	95 de       	rcall	.-726    	; 0x370 <LCD_displayString>
				LCD_displayStringRowColumn(1,0,password);
 646:	a8 01       	movw	r20, r16
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	ae de       	rcall	.-676    	; 0x3aa <LCD_displayStringRowColumn>
 64e:	87 ea       	ldi	r24, 0xA7	; 167
 650:	91 e6       	ldi	r25, 0x61	; 97
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <__vector_1+0x1bc>
 656:	00 c0       	rjmp	.+0      	; 0x658 <__vector_1+0x1c2>
 658:	00 00       	nop
				_delay_ms(100);
				while(BIT_IS_SET(PIND,PD2));// wait to new key pressed
 65a:	82 99       	sbic	0x10, 2	; 16
 65c:	fe cf       	rjmp	.-4      	; 0x65a <__vector_1+0x1c4>
				while(BIT_IS_CLEAR(PIND,PD2));// wait to new key pressed
 65e:	82 9b       	sbis	0x10, 2	; 16
 660:	fe cf       	rjmp	.-4      	; 0x65e <__vector_1+0x1c8>
			passitr=0;
			LCD_clearScreen();
			LCD_displayString("enter new psswrd");
			while(BIT_IS_SET(PIND,PD2));// wait to new key pressed
			while(BIT_IS_CLEAR(PIND,PD2));// wait to new key pressed
			while((un.chr=KeyPad_getPressedKey()) != '#')
 662:	c2 dd       	rcall	.-1148   	; 0x1e8 <KeyPad_getPressedKey>
 664:	88 83       	st	Y, r24
 666:	83 32       	cpi	r24, 0x23	; 35
 668:	b9 f6       	brne	.-82     	; 0x618 <__vector_1+0x182>
				LCD_displayStringRowColumn(1,0,password);
				_delay_ms(100);
				while(BIT_IS_SET(PIND,PD2));// wait to new key pressed
				while(BIT_IS_CLEAR(PIND,PD2));// wait to new key pressed
			}
			LCD_clearScreen();
 66a:	a8 de       	rcall	.-688    	; 0x3bc <LCD_clearScreen>
			LCD_displayString("new pass is :");
 66c:	82 e0       	ldi	r24, 0x02	; 2
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	7f de       	rcall	.-770    	; 0x370 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,password);
 672:	a8 01       	movw	r20, r16
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	98 de       	rcall	.-720    	; 0x3aa <LCD_displayStringRowColumn>
 67a:	9f e3       	ldi	r25, 0x3F	; 63
 67c:	ed e0       	ldi	r30, 0x0D	; 13
 67e:	f3 e0       	ldi	r31, 0x03	; 3
 680:	91 50       	subi	r25, 0x01	; 1
 682:	e0 40       	sbci	r30, 0x00	; 0
 684:	f0 40       	sbci	r31, 0x00	; 0
 686:	e1 f7       	brne	.-8      	; 0x680 <__vector_1+0x1ea>
 688:	00 c0       	rjmp	.+0      	; 0x68a <__vector_1+0x1f4>
 68a:	00 00       	nop
			_delay_ms(1000);
			LCD_clearScreen();
 68c:	97 de       	rcall	.-722    	; 0x3bc <LCD_clearScreen>
			LCD_displayString(password);
 68e:	c8 01       	movw	r24, r16
 690:	6f de       	rcall	.-802    	; 0x370 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"press # 2confirm");
 692:	40 e1       	ldi	r20, 0x10	; 16
 694:	51 e0       	ldi	r21, 0x01	; 1
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	87 de       	rcall	.-754    	; 0x3aa <LCD_displayStringRowColumn>
			while(BIT_IS_SET(PIND,PD2));// wait to new key pressed
 69c:	82 99       	sbic	0x10, 2	; 16
 69e:	fe cf       	rjmp	.-4      	; 0x69c <__vector_1+0x206>
			while(BIT_IS_CLEAR(PIND,PD2));// wait for new key to be pressed
 6a0:	82 9b       	sbis	0x10, 2	; 16
 6a2:	fe cf       	rjmp	.-4      	; 0x6a0 <__vector_1+0x20a>
			un.chr=KeyPad_getPressedKey();
 6a4:	a1 dd       	rcall	.-1214   	; 0x1e8 <KeyPad_getPressedKey>
 6a6:	88 83       	st	Y, r24
			
		} while (un.chr != '#'); // if # then exit and update password
 6a8:	83 32       	cpi	r24, 0x23	; 35
 6aa:	09 f0       	breq	.+2      	; 0x6ae <__vector_1+0x218>
 6ac:	a6 cf       	rjmp	.-180    	; 0x5fa <__vector_1+0x164>
		while(BIT_IS_SET(PIND,PD2));// wait to new key pressed
 6ae:	82 99       	sbic	0x10, 2	; 16
 6b0:	fe cf       	rjmp	.-4      	; 0x6ae <__vector_1+0x218>
		LCD_clearScreen();
 6b2:	84 de       	rcall	.-760    	; 0x3bc <LCD_clearScreen>
		LCD_displayString("new password ");
 6b4:	81 e2       	ldi	r24, 0x21	; 33
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	5b de       	rcall	.-842    	; 0x370 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,password);
 6ba:	40 e6       	ldi	r20, 0x60	; 96
 6bc:	51 e0       	ldi	r21, 0x01	; 1
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	73 de       	rcall	.-794    	; 0x3aa <LCD_displayStringRowColumn>
 6c4:	2f eb       	ldi	r18, 0xBF	; 191
 6c6:	84 ed       	ldi	r24, 0xD4	; 212
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	21 50       	subi	r18, 0x01	; 1
 6cc:	80 40       	sbci	r24, 0x00	; 0
 6ce:	90 40       	sbci	r25, 0x00	; 0
 6d0:	e1 f7       	brne	.-8      	; 0x6ca <__vector_1+0x234>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <__vector_1+0x23e>
 6d4:	00 00       	nop
		_delay_ms(600);
		EEPROM_write(passLenAddr,strlen(password));
 6d6:	c0 e6       	ldi	r28, 0x60	; 96
 6d8:	d1 e0       	ldi	r29, 0x01	; 1
 6da:	fe 01       	movw	r30, r28
 6dc:	01 90       	ld	r0, Z+
 6de:	00 20       	and	r0, r0
 6e0:	e9 f7       	brne	.-6      	; 0x6dc <__vector_1+0x246>
 6e2:	31 97       	sbiw	r30, 0x01	; 1
 6e4:	bf 01       	movw	r22, r30
 6e6:	60 56       	subi	r22, 0x60	; 96
 6e8:	71 40       	sbci	r23, 0x01	; 1
 6ea:	85 e0       	ldi	r24, 0x05	; 5
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	c7 dc       	rcall	.-1650   	; 0x7e <EEPROM_write>
		EEPROM_WriteNByte(passAddrLoc,password,strlen(password));
 6f0:	fe 01       	movw	r30, r28
 6f2:	01 90       	ld	r0, Z+
 6f4:	00 20       	and	r0, r0
 6f6:	e9 f7       	brne	.-6      	; 0x6f2 <__vector_1+0x25c>
 6f8:	31 97       	sbiw	r30, 0x01	; 1
 6fa:	af 01       	movw	r20, r30
 6fc:	40 56       	subi	r20, 0x60	; 96
 6fe:	51 40       	sbci	r21, 0x01	; 1
 700:	be 01       	movw	r22, r28
 702:	85 e1       	ldi	r24, 0x15	; 21
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	ca dc       	rcall	.-1644   	; 0x9c <EEPROM_WriteNByte>
		LCD_clearScreen();
 708:	59 de       	rcall	.-846    	; 0x3bc <LCD_clearScreen>
		LCD_displayString("password updated");
 70a:	8f e2       	ldi	r24, 0x2F	; 47
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	30 de       	rcall	.-928    	; 0x370 <LCD_displayString>
		LCD_clearScreen();
 710:	55 de       	rcall	.-854    	; 0x3bc <LCD_clearScreen>
		LCD_displayString("try it kda ;)");
 712:	80 e4       	ldi	r24, 0x40	; 64
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	2c de       	rcall	.-936    	; 0x370 <LCD_displayString>
		pass_flag=0;
 718:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <__data_end+0x1>
 71c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
		password[0]='\0';
 720:	18 82       	st	Y, r1
		passitr=0;
 722:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <passitr+0x1>
 726:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <passitr>
		un.chr='\0';
 72a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <un>
		SET_BIT(GIFR,INTF0); // clear flag by setting 1 to it
 72e:	8a b7       	in	r24, 0x3a	; 58
 730:	80 64       	ori	r24, 0x40	; 64
 732:	8a bf       	out	0x3a, r24	; 58
		sei();
 734:	78 94       	sei
	}
}
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	bf 91       	pop	r27
 740:	af 91       	pop	r26
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	7f 91       	pop	r23
 748:	6f 91       	pop	r22
 74a:	5f 91       	pop	r21
 74c:	4f 91       	pop	r20
 74e:	3f 91       	pop	r19
 750:	2f 91       	pop	r18
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
 760:	1f 92       	push	r1
 762:	0f 92       	push	r0
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	0f 92       	push	r0
 768:	11 24       	eor	r1, r1
 76a:	2f 93       	push	r18
 76c:	3f 93       	push	r19
 76e:	4f 93       	push	r20
 770:	5f 93       	push	r21
 772:	6f 93       	push	r22
 774:	7f 93       	push	r23
 776:	8f 93       	push	r24
 778:	9f 93       	push	r25
 77a:	af 93       	push	r26
 77c:	bf 93       	push	r27
 77e:	ef 93       	push	r30
 780:	ff 93       	push	r31
	password[0]='\0';
 782:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <password>
	passitr=0;
 786:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <passitr+0x1>
 78a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <passitr>
	LCD_clearScreen();
 78e:	16 de       	rcall	.-980    	; 0x3bc <LCD_clearScreen>
	LCD_displayString("turnning off");
 790:	8e e4       	ldi	r24, 0x4E	; 78
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	ed dd       	rcall	.-1062   	; 0x370 <LCD_displayString>
 796:	2f eb       	ldi	r18, 0xBF	; 191
 798:	87 e2       	ldi	r24, 0x27	; 39
 79a:	99 e0       	ldi	r25, 0x09	; 9
 79c:	21 50       	subi	r18, 0x01	; 1
 79e:	80 40       	sbci	r24, 0x00	; 0
 7a0:	90 40       	sbci	r25, 0x00	; 0
 7a2:	e1 f7       	brne	.-8      	; 0x79c <__vector_8+0x3c>
 7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <__vector_8+0x46>
 7a6:	00 00       	nop
	_delay_ms(3000);
	TIMER1_sleep();
 7a8:	3e de       	rcall	.-900    	; 0x426 <TIMER1_sleep>
	LCD_power_off();
 7aa:	0b de       	rcall	.-1002   	; 0x3c2 <LCD_power_off>
	MCU_power_down();
 7ac:	10 dd       	rcall	.-1504   	; 0x1ce <MCU_power_down>
 7ae:	ff 91       	pop	r31
 7b0:	ef 91       	pop	r30
 7b2:	bf 91       	pop	r27
 7b4:	af 91       	pop	r26
 7b6:	9f 91       	pop	r25
 7b8:	8f 91       	pop	r24
 7ba:	7f 91       	pop	r23
 7bc:	6f 91       	pop	r22
 7be:	5f 91       	pop	r21
 7c0:	4f 91       	pop	r20
 7c2:	3f 91       	pop	r19
 7c4:	2f 91       	pop	r18
 7c6:	0f 90       	pop	r0
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	0f 90       	pop	r0
 7cc:	1f 90       	pop	r1
 7ce:	18 95       	reti

000007d0 <strcmp>:
 7d0:	fb 01       	movw	r30, r22
 7d2:	dc 01       	movw	r26, r24
 7d4:	8d 91       	ld	r24, X+
 7d6:	01 90       	ld	r0, Z+
 7d8:	80 19       	sub	r24, r0
 7da:	01 10       	cpse	r0, r1
 7dc:	d9 f3       	breq	.-10     	; 0x7d4 <strcmp+0x4>
 7de:	99 0b       	sbc	r25, r25
 7e0:	08 95       	ret

000007e2 <_exit>:
 7e2:	f8 94       	cli

000007e4 <__stop_program>:
 7e4:	ff cf       	rjmp	.-2      	; 0x7e4 <__stop_program>
