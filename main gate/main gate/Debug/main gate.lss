
main gate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000556  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00000556  000005ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  008000cc  008000cc  00000656  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001544  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abc  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b17  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  000032f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000530  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d45  00000000  00000000  00003ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000481d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
   2:	fc c1       	rjmp	.+1016   	; 0x3fc <__vector_1>
   4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
   6:	3a c0       	rjmp	.+116    	; 0x7c <__bad_interrupt>
   8:	39 c0       	rjmp	.+114    	; 0x7c <__bad_interrupt>
   a:	38 c0       	rjmp	.+112    	; 0x7c <__bad_interrupt>
   c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
   e:	36 c0       	rjmp	.+108    	; 0x7c <__bad_interrupt>
  10:	35 c0       	rjmp	.+106    	; 0x7c <__bad_interrupt>
  12:	34 c0       	rjmp	.+104    	; 0x7c <__bad_interrupt>
  14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
  16:	32 c0       	rjmp	.+100    	; 0x7c <__bad_interrupt>
  18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
  1a:	30 c0       	rjmp	.+96     	; 0x7c <__bad_interrupt>
  1c:	2f c0       	rjmp	.+94     	; 0x7c <__bad_interrupt>
  1e:	2e c0       	rjmp	.+92     	; 0x7c <__bad_interrupt>
  20:	2d c0       	rjmp	.+90     	; 0x7c <__bad_interrupt>
  22:	2c c0       	rjmp	.+88     	; 0x7c <__bad_interrupt>
  24:	2b c0       	rjmp	.+86     	; 0x7c <__bad_interrupt>
  26:	1d c1       	rjmp	.+570    	; 0x262 <KeyPad_getPressedKey+0x5a>
  28:	fe c0       	rjmp	.+508    	; 0x226 <KeyPad_getPressedKey+0x1e>
  2a:	ff c0       	rjmp	.+510    	; 0x22a <KeyPad_getPressedKey+0x22>
  2c:	00 c1       	rjmp	.+512    	; 0x22e <KeyPad_getPressedKey+0x26>
  2e:	01 c1       	rjmp	.+514    	; 0x232 <KeyPad_getPressedKey+0x2a>
  30:	02 c1       	rjmp	.+516    	; 0x236 <KeyPad_getPressedKey+0x2e>
  32:	03 c1       	rjmp	.+518    	; 0x23a <KeyPad_getPressedKey+0x32>
  34:	04 c1       	rjmp	.+520    	; 0x23e <KeyPad_getPressedKey+0x36>
  36:	05 c1       	rjmp	.+522    	; 0x242 <KeyPad_getPressedKey+0x3a>
  38:	06 c1       	rjmp	.+524    	; 0x246 <KeyPad_getPressedKey+0x3e>
  3a:	07 c1       	rjmp	.+526    	; 0x24a <KeyPad_getPressedKey+0x42>
  3c:	08 c1       	rjmp	.+528    	; 0x24e <KeyPad_getPressedKey+0x46>
  3e:	09 c1       	rjmp	.+530    	; 0x252 <KeyPad_getPressedKey+0x4a>
  40:	0a c1       	rjmp	.+532    	; 0x256 <KeyPad_getPressedKey+0x4e>
  42:	0b c1       	rjmp	.+534    	; 0x25a <KeyPad_getPressedKey+0x52>
  44:	0c c1       	rjmp	.+536    	; 0x25e <KeyPad_getPressedKey+0x56>

00000046 <__ctors_end>:
  46:	11 24       	eor	r1, r1
  48:	1f be       	out	0x3f, r1	; 63
  4a:	cf e5       	ldi	r28, 0x5F	; 95
  4c:	d4 e0       	ldi	r29, 0x04	; 4
  4e:	de bf       	out	0x3e, r29	; 62
  50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
  52:	10 e0       	ldi	r17, 0x00	; 0
  54:	a0 e6       	ldi	r26, 0x60	; 96
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	e6 e5       	ldi	r30, 0x56	; 86
  5a:	f5 e0       	ldi	r31, 0x05	; 5
  5c:	02 c0       	rjmp	.+4      	; 0x62 <__do_copy_data+0x10>
  5e:	05 90       	lpm	r0, Z+
  60:	0d 92       	st	X+, r0
  62:	ac 3c       	cpi	r26, 0xCC	; 204
  64:	b1 07       	cpc	r27, r17
  66:	d9 f7       	brne	.-10     	; 0x5e <__do_copy_data+0xc>

00000068 <__do_clear_bss>:
  68:	21 e0       	ldi	r18, 0x01	; 1
  6a:	ac ec       	ldi	r26, 0xCC	; 204
  6c:	b0 e0       	ldi	r27, 0x00	; 0
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	aa 30       	cpi	r26, 0x0A	; 10
  74:	b2 07       	cpc	r27, r18
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	ac d1       	rcall	.+856    	; 0x3d2 <main>
  7a:	6b c2       	rjmp	.+1238   	; 0x552 <_exit>

0000007c <__bad_interrupt>:
  7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <EEPROM_write>:

/* EEPROM write Byte into EEPROM at specific address */
void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{	
	/* Wait for completion of previous write */
	while(!BIT_IS_CLEAR(EECR,EEWE));
  7e:	e1 99       	sbic	0x1c, 1	; 28
  80:	fe cf       	rjmp	.-4      	; 0x7e <EEPROM_write>
	//while(!BIT_IS_CLEAR(SPMCR,SPMEN)); // wait if MCU storing program  => unnecessary to written here 
	
	/* Set up address and data registers */
	EEAR = uiAddress;
  82:	9f bb       	out	0x1f, r25	; 31
  84:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  86:	6d bb       	out	0x1d, r22	; 29

	/* Write logical one to EEMWE */
	SET_BIT(EECR,EEMWE);
  88:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	SET_BIT(EECR,EEWE);
  8a:	e1 9a       	sbi	0x1c, 1	; 28
  8c:	08 95       	ret

0000008e <EEPROM_read>:

/* EEPROM read Byte from EEPROM at specific address */
uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(!BIT_IS_CLEAR(EECR,EEWE));
  8e:	e1 99       	sbic	0x1c, 1	; 28
  90:	fe cf       	rjmp	.-4      	; 0x8e <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
  92:	9f bb       	out	0x1f, r25	; 31
  94:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	SET_BIT(EECR,EERE);
  96:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
  98:	8d b3       	in	r24, 0x1d	; 29
}
  9a:	08 95       	ret

0000009c <EEPROM_WriteNByte>:


/* EEPROM write N number of Bytes into EEPROM at specific address */
void EEPROM_WriteNByte(uint16_t uiAddress, uint8_t *ucData,uint16_t uiNumberOfBytes)
{
  9c:	ef 92       	push	r14
  9e:	ff 92       	push	r15
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	8c 01       	movw	r16, r24
  aa:	7b 01       	movw	r14, r22
  ac:	ea 01       	movw	r28, r20
	
	while(uiNumberOfBytes!=0){
  ae:	20 97       	sbiw	r28, 0x00	; 0
  b0:	49 f0       	breq	.+18     	; 0xc4 <EEPROM_WriteNByte+0x28>
		EEPROM_write(uiAddress,*ucData);
  b2:	f7 01       	movw	r30, r14
  b4:	61 91       	ld	r22, Z+
  b6:	7f 01       	movw	r14, r30
  b8:	c8 01       	movw	r24, r16
  ba:	e1 df       	rcall	.-62     	; 0x7e <EEPROM_write>
		ucData++;
		uiAddress++;
  bc:	0f 5f       	subi	r16, 0xFF	; 255
  be:	1f 4f       	sbci	r17, 0xFF	; 255
		uiNumberOfBytes--;
  c0:	21 97       	sbiw	r28, 0x01	; 1

/* EEPROM write N number of Bytes into EEPROM at specific address */
void EEPROM_WriteNByte(uint16_t uiAddress, uint8_t *ucData,uint16_t uiNumberOfBytes)
{
	
	while(uiNumberOfBytes!=0){
  c2:	b9 f7       	brne	.-18     	; 0xb2 <EEPROM_WriteNByte+0x16>
		ucData++;
		uiAddress++;
		uiNumberOfBytes--;
	}
	
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
  cc:	ff 90       	pop	r15
  ce:	ef 90       	pop	r14
  d0:	08 95       	ret

000000d2 <EEPROM_readNByte>:
/* EEPROM read N number of Bytes from EEPROM at specific address and copy it into ucDataRam pointer */

void EEPROM_readNByte(uint16_t uiAddress,uint8_t *ucDataRam,uint16_t uiNumberOfBytes){
  d2:	af 92       	push	r10
  d4:	bf 92       	push	r11
  d6:	cf 92       	push	r12
  d8:	df 92       	push	r13
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
  e8:	5b 01       	movw	r10, r22
  ea:	6a 01       	movw	r12, r20
	int i=uiNumberOfBytes;
	while (uiNumberOfBytes!=0){
  ec:	41 15       	cp	r20, r1
  ee:	51 05       	cpc	r21, r1
  f0:	69 f0       	breq	.+26     	; 0x10c <EEPROM_readNByte+0x3a>
  f2:	8a 01       	movw	r16, r20
  f4:	7b 01       	movw	r14, r22
		*ucDataRam=EEPROM_read(uiAddress);
  f6:	ce 01       	movw	r24, r28
  f8:	ca df       	rcall	.-108    	; 0x8e <EEPROM_read>
  fa:	f7 01       	movw	r30, r14
  fc:	81 93       	st	Z+, r24
  fe:	7f 01       	movw	r14, r30
		uiAddress++;
 100:	21 96       	adiw	r28, 0x01	; 1
		ucDataRam++;
		uiNumberOfBytes--;
 102:	01 50       	subi	r16, 0x01	; 1
 104:	11 09       	sbc	r17, r1
}
/* EEPROM read N number of Bytes from EEPROM at specific address and copy it into ucDataRam pointer */

void EEPROM_readNByte(uint16_t uiAddress,uint8_t *ucDataRam,uint16_t uiNumberOfBytes){
	int i=uiNumberOfBytes;
	while (uiNumberOfBytes!=0){
 106:	b9 f7       	brne	.-18     	; 0xf6 <EEPROM_readNByte+0x24>
 108:	ac 0c       	add	r10, r12
 10a:	bd 1c       	adc	r11, r13
		*ucDataRam=EEPROM_read(uiAddress);
		uiAddress++;
		ucDataRam++;
		uiNumberOfBytes--;
	}
ucDataRam[i]='\0';
 10c:	f5 01       	movw	r30, r10
 10e:	ec 0d       	add	r30, r12
 110:	fd 1d       	adc	r31, r13
 112:	10 82       	st	Z, r1
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	ff 90       	pop	r15
 11e:	ef 90       	pop	r14
 120:	df 90       	pop	r13
 122:	cf 90       	pop	r12
 124:	bf 90       	pop	r11
 126:	af 90       	pop	r10
 128:	08 95       	ret

0000012a <get_stored_password>:
*/
#include "function.h"
#include "lcd.h"
#include "EEPROM.h"
#include "keypad.h"
void get_stored_password(uint8_t* pass){
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	8c 01       	movw	r16, r24
	
	char len = EEPROM_read(passLenAddr);
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	aa df       	rcall	.-172    	; 0x8e <EEPROM_read>
	EEPROM_readNByte(passAddrLoc,(uint8_t*)pass,len);
 13a:	c8 2f       	mov	r28, r24
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	ae 01       	movw	r20, r28
 140:	b8 01       	movw	r22, r16
 142:	85 e1       	ldi	r24, 0x15	; 21
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	c5 df       	rcall	.-118    	; 0xd2 <EEPROM_readNByte>
	pass[len]='\0';
 148:	c0 0f       	add	r28, r16
 14a:	d1 1f       	adc	r29, r17
 14c:	18 82       	st	Y, r1

}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <initpassword>:


void initpassword()
{
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	64 97       	sbiw	r28, 0x14	; 20
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
	char str[20];
	int i=0;
	char ch;
	CLEAR_BIT(DDRD,PD5);
 170:	8d 98       	cbi	0x11, 5	; 17
	SET_BIT(PORTD,PD5); // enable pull up resistor on pd5 pin
 172:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	8d e3       	ldi	r24, 0x3D	; 61
 178:	99 e4       	ldi	r25, 0x49	; 73
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <initpassword+0x22>
 182:	00 c0       	rjmp	.+0      	; 0x184 <initpassword+0x2c>
 184:	00 00       	nop
	_delay_ms(3000);
	if (BIT_IS_CLEAR(PIND,PD5))// set new password
 186:	85 99       	sbic	0x10, 5	; 16
 188:	30 c0       	rjmp	.+96     	; 0x1ea <initpassword+0x92>
	{
		LCD_clearScreen();
 18a:	20 d1       	rcall	.+576    	; 0x3cc <LCD_clearScreen>
		LCD_displayString("set new password:");
 18c:	80 e6       	ldi	r24, 0x60	; 96
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	f7 d0       	rcall	.+494    	; 0x380 <LCD_displayString>
 192:	8e 01       	movw	r16, r28
 194:	0f 5f       	subi	r16, 0xFF	; 255
 196:	1f 4f       	sbci	r17, 0xFF	; 255
		while((ch=KeyPad_getPressedKey())!='#'){
 198:	0a c0       	rjmp	.+20     	; 0x1ae <initpassword+0x56>
			str[i++]=ch;
 19a:	f8 01       	movw	r30, r16
 19c:	81 93       	st	Z+, r24
 19e:	8f 01       	movw	r16, r30
			str[i]='\0';
 1a0:	10 82       	st	Z, r1
			LCD_displayStringRowColumn(1,0,str);
 1a2:	ae 01       	movw	r20, r28
 1a4:	4f 5f       	subi	r20, 0xFF	; 255
 1a6:	5f 4f       	sbci	r21, 0xFF	; 255
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	06 d1       	rcall	.+524    	; 0x3ba <LCD_displayStringRowColumn>
	_delay_ms(3000);
	if (BIT_IS_CLEAR(PIND,PD5))// set new password
	{
		LCD_clearScreen();
		LCD_displayString("set new password:");
		while((ch=KeyPad_getPressedKey())!='#'){
 1ae:	2c d0       	rcall	.+88     	; 0x208 <KeyPad_getPressedKey>
 1b0:	83 32       	cpi	r24, 0x23	; 35
 1b2:	99 f7       	brne	.-26     	; 0x19a <initpassword+0x42>
			str[i++]=ch;
			str[i]='\0';
			LCD_displayStringRowColumn(1,0,str);
		}
		
		EEPROM_write(passLenAddr,strlen(str));
 1b4:	8e 01       	movw	r16, r28
 1b6:	0f 5f       	subi	r16, 0xFF	; 255
 1b8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ba:	f8 01       	movw	r30, r16
 1bc:	01 90       	ld	r0, Z+
 1be:	00 20       	and	r0, r0
 1c0:	e9 f7       	brne	.-6      	; 0x1bc <initpassword+0x64>
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	bf 01       	movw	r22, r30
 1c6:	60 1b       	sub	r22, r16
 1c8:	71 0b       	sbc	r23, r17
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	57 df       	rcall	.-338    	; 0x7e <EEPROM_write>
		EEPROM_WriteNByte(passAddrLoc,(uint8_t*)str,strlen(str));
 1d0:	f8 01       	movw	r30, r16
 1d2:	01 90       	ld	r0, Z+
 1d4:	00 20       	and	r0, r0
 1d6:	e9 f7       	brne	.-6      	; 0x1d2 <initpassword+0x7a>
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	af 01       	movw	r20, r30
 1dc:	40 1b       	sub	r20, r16
 1de:	51 0b       	sbc	r21, r17
 1e0:	b8 01       	movw	r22, r16
 1e2:	85 e1       	ldi	r24, 0x15	; 21
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	5a df       	rcall	.-332    	; 0x9c <EEPROM_WriteNByte>
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <initpassword+0x9a>
	}
	else
	{
		LCD_clearScreen();
 1ea:	f0 d0       	rcall	.+480    	; 0x3cc <LCD_clearScreen>
		LCD_displayString("use your password");
 1ec:	82 e7       	ldi	r24, 0x72	; 114
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	c7 d0       	rcall	.+398    	; 0x380 <LCD_displayString>
		
	}


 1f2:	64 96       	adiw	r28, 0x14	; 20
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <KeyPad_getPressedKey>:
			}
		}
	}
	#else // WITH_IC_74922 == 1
	#ifdef KEY_PAD_IC_MASK
	return KeyPad_4x4_withIC74922 ( ((KEYPAD_PORT_IN & KEY_PAD_IC_MASK)>>2) + 1 );
 208:	86 b3       	in	r24, 0x16	; 22
 20a:	8c 73       	andi	r24, 0x3C	; 60
 20c:	86 95       	lsr	r24
 20e:	86 95       	lsr	r24
 210:	8f 5f       	subi	r24, 0xFF	; 255
// if we are using ic 74922
#else

static uint8_t KeyPad_4x4_withIC74922(uint8_t button_number)
{
	switch(button_number)
 212:	48 2f       	mov	r20, r24
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	fa 01       	movw	r30, r20
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	e0 31       	cpi	r30, 0x10	; 16
 21c:	f1 05       	cpc	r31, r1
 21e:	10 f5       	brcc	.+68     	; 0x264 <KeyPad_getPressedKey+0x5c>
 220:	ed 5e       	subi	r30, 0xED	; 237
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	09 94       	ijmp
	{
		case 1: return '1';
		break;
		case 2: return '2';
 226:	82 e3       	ldi	r24, 0x32	; 50
 228:	08 95       	ret
		break;
		case 3: return '3';
 22a:	83 e3       	ldi	r24, 0x33	; 51
 22c:	08 95       	ret
		break;
		case 4: return 'a'; /* ASCII Code of 'a' */
 22e:	81 e6       	ldi	r24, 0x61	; 97
 230:	08 95       	ret
		break;
		case 5: return '4';
 232:	84 e3       	ldi	r24, 0x34	; 52
 234:	08 95       	ret
		break;
		case 6: return '5';
 236:	85 e3       	ldi	r24, 0x35	; 53
 238:	08 95       	ret
		break;
		case 7: return '6';
 23a:	86 e3       	ldi	r24, 0x36	; 54
 23c:	08 95       	ret
		break;
		case 8: return 'b'; /* ASCII Code of 'b' */
 23e:	82 e6       	ldi	r24, 0x62	; 98
 240:	08 95       	ret
		break;
		case 9: return '7';
 242:	87 e3       	ldi	r24, 0x37	; 55
 244:	08 95       	ret
		break;
		case 10: return '8';
 246:	88 e3       	ldi	r24, 0x38	; 56
 248:	08 95       	ret
		break;
		case 11: return '9';
 24a:	89 e3       	ldi	r24, 0x39	; 57
 24c:	08 95       	ret
		break;
		case 12: return 'c'; /* ASCII Code of 'c' */
 24e:	83 e6       	ldi	r24, 0x63	; 99
 250:	08 95       	ret
		break;
		case 13: return '*';  /* ASCII of '*' */
 252:	8a e2       	ldi	r24, 0x2A	; 42
 254:	08 95       	ret
		break;
		case 14: return '0';
 256:	80 e3       	ldi	r24, 0x30	; 48
 258:	08 95       	ret
		break;
		case 15: return '#'; /* ASCII Code of '#' */
 25a:	83 e2       	ldi	r24, 0x23	; 35
 25c:	08 95       	ret
		break;
		case 16: return 'd'; /* ASCII Code of 'd' */
 25e:	84 e6       	ldi	r24, 0x64	; 100
 260:	08 95       	ret

static uint8_t KeyPad_4x4_withIC74922(uint8_t button_number)
{
	switch(button_number)
	{
		case 1: return '1';
 262:	81 e3       	ldi	r24, 0x31	; 49
	//write code for lower pins here
	
	#endif // end if we use upper pins
	
	#endif // end if we use IC
}
 264:	08 95       	ret

00000266 <LCD_sendCommand>:
void LCD_intgerToString(int data)
{
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* itoa convert int to char, 10 for decimal */
	LCD_displayString(buff);
}
 266:	c0 98       	cbi	0x18, 0	; 24
 268:	ef ec       	ldi	r30, 0xCF	; 207
 26a:	f7 e0       	ldi	r31, 0x07	; 7
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_sendCommand+0x6>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_sendCommand+0xc>
 272:	00 00       	nop
 274:	c1 9a       	sbi	0x18, 1	; 24
 276:	ef ec       	ldi	r30, 0xCF	; 207
 278:	f7 e0       	ldi	r31, 0x07	; 7
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_sendCommand+0x14>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_sendCommand+0x1a>
 280:	00 00       	nop
 282:	95 b3       	in	r25, 0x15	; 21
 284:	15 ba       	out	0x15, r1	; 21
 286:	95 b3       	in	r25, 0x15	; 21
 288:	28 2f       	mov	r18, r24
 28a:	22 95       	swap	r18
 28c:	2f 70       	andi	r18, 0x0F	; 15
 28e:	92 2b       	or	r25, r18
 290:	95 bb       	out	0x15, r25	; 21
 292:	ef ec       	ldi	r30, 0xCF	; 207
 294:	f7 e0       	ldi	r31, 0x07	; 7
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_sendCommand+0x30>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_sendCommand+0x36>
 29c:	00 00       	nop
 29e:	c1 98       	cbi	0x18, 1	; 24
 2a0:	ef ec       	ldi	r30, 0xCF	; 207
 2a2:	f7 e0       	ldi	r31, 0x07	; 7
 2a4:	31 97       	sbiw	r30, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_sendCommand+0x3e>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_sendCommand+0x44>
 2aa:	00 00       	nop
 2ac:	c1 9a       	sbi	0x18, 1	; 24
 2ae:	ef ec       	ldi	r30, 0xCF	; 207
 2b0:	f7 e0       	ldi	r31, 0x07	; 7
 2b2:	31 97       	sbiw	r30, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_sendCommand+0x4c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_sendCommand+0x52>
 2b8:	00 00       	nop
 2ba:	95 b3       	in	r25, 0x15	; 21
 2bc:	15 ba       	out	0x15, r1	; 21
 2be:	95 b3       	in	r25, 0x15	; 21
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	89 2b       	or	r24, r25
 2c4:	85 bb       	out	0x15, r24	; 21
 2c6:	8f ec       	ldi	r24, 0xCF	; 207
 2c8:	97 e0       	ldi	r25, 0x07	; 7
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_sendCommand+0x64>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_sendCommand+0x6a>
 2d0:	00 00       	nop
 2d2:	c1 98       	cbi	0x18, 1	; 24
 2d4:	ef ec       	ldi	r30, 0xCF	; 207
 2d6:	f7 e0       	ldi	r31, 0x07	; 7
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_sendCommand+0x72>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_sendCommand+0x78>
 2de:	00 00       	nop
 2e0:	08 95       	ret

000002e2 <LCD_init>:
 2e2:	87 b3       	in	r24, 0x17	; 23
 2e4:	83 60       	ori	r24, 0x03	; 3
 2e6:	87 bb       	out	0x17, r24	; 23
 2e8:	84 b3       	in	r24, 0x14	; 20
 2ea:	8f 60       	ori	r24, 0x0F	; 15
 2ec:	84 bb       	out	0x14, r24	; 20
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	ba df       	rcall	.-140    	; 0x266 <LCD_sendCommand>
 2f2:	88 e2       	ldi	r24, 0x28	; 40
 2f4:	b8 df       	rcall	.-144    	; 0x266 <LCD_sendCommand>
 2f6:	8c e0       	ldi	r24, 0x0C	; 12
 2f8:	b6 df       	rcall	.-148    	; 0x266 <LCD_sendCommand>
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	b4 df       	rcall	.-152    	; 0x266 <LCD_sendCommand>
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	b2 df       	rcall	.-156    	; 0x266 <LCD_sendCommand>
 302:	08 95       	ret

00000304 <LCD_displayCharacter>:
 304:	c0 9a       	sbi	0x18, 0	; 24
 306:	ef ec       	ldi	r30, 0xCF	; 207
 308:	f7 e0       	ldi	r31, 0x07	; 7
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_displayCharacter+0x6>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_displayCharacter+0xc>
 310:	00 00       	nop
 312:	c1 9a       	sbi	0x18, 1	; 24
 314:	ef ec       	ldi	r30, 0xCF	; 207
 316:	f7 e0       	ldi	r31, 0x07	; 7
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_displayCharacter+0x14>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_displayCharacter+0x1a>
 31e:	00 00       	nop
 320:	95 b3       	in	r25, 0x15	; 21
 322:	15 ba       	out	0x15, r1	; 21
 324:	95 b3       	in	r25, 0x15	; 21
 326:	28 2f       	mov	r18, r24
 328:	22 95       	swap	r18
 32a:	2f 70       	andi	r18, 0x0F	; 15
 32c:	92 2b       	or	r25, r18
 32e:	95 bb       	out	0x15, r25	; 21
 330:	ef ec       	ldi	r30, 0xCF	; 207
 332:	f7 e0       	ldi	r31, 0x07	; 7
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_displayCharacter+0x30>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_displayCharacter+0x36>
 33a:	00 00       	nop
 33c:	c1 98       	cbi	0x18, 1	; 24
 33e:	ef ec       	ldi	r30, 0xCF	; 207
 340:	f7 e0       	ldi	r31, 0x07	; 7
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_displayCharacter+0x3e>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_displayCharacter+0x44>
 348:	00 00       	nop
 34a:	c1 9a       	sbi	0x18, 1	; 24
 34c:	ef ec       	ldi	r30, 0xCF	; 207
 34e:	f7 e0       	ldi	r31, 0x07	; 7
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCD_displayCharacter+0x4c>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_displayCharacter+0x52>
 356:	00 00       	nop
 358:	95 b3       	in	r25, 0x15	; 21
 35a:	15 ba       	out	0x15, r1	; 21
 35c:	95 b3       	in	r25, 0x15	; 21
 35e:	8f 70       	andi	r24, 0x0F	; 15
 360:	89 2b       	or	r24, r25
 362:	85 bb       	out	0x15, r24	; 21
 364:	8f ec       	ldi	r24, 0xCF	; 207
 366:	97 e0       	ldi	r25, 0x07	; 7
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_displayCharacter+0x64>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_displayCharacter+0x6a>
 36e:	00 00       	nop
 370:	c1 98       	cbi	0x18, 1	; 24
 372:	ef ec       	ldi	r30, 0xCF	; 207
 374:	f7 e0       	ldi	r31, 0x07	; 7
 376:	31 97       	sbiw	r30, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <LCD_displayCharacter+0x72>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_displayCharacter+0x78>
 37c:	00 00       	nop
 37e:	08 95       	ret

00000380 <LCD_displayString>:
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	ec 01       	movw	r28, r24
 386:	88 81       	ld	r24, Y
 388:	88 23       	and	r24, r24
 38a:	29 f0       	breq	.+10     	; 0x396 <LCD_displayString+0x16>
 38c:	21 96       	adiw	r28, 0x01	; 1
 38e:	ba df       	rcall	.-140    	; 0x304 <LCD_displayCharacter>
 390:	89 91       	ld	r24, Y+
 392:	81 11       	cpse	r24, r1
 394:	fc cf       	rjmp	.-8      	; 0x38e <LCD_displayString+0xe>
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <LCD_goToRowColumn>:
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	31 f0       	breq	.+12     	; 0x3ac <LCD_goToRowColumn+0x10>
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <LCD_goToRowColumn+0x14>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	29 f4       	brne	.+10     	; 0x3b2 <LCD_goToRowColumn+0x16>
 3a8:	60 5c       	subi	r22, 0xC0	; 192
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <LCD_goToRowColumn+0x16>
 3ac:	60 5f       	subi	r22, 0xF0	; 240
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <LCD_goToRowColumn+0x16>
 3b0:	60 5b       	subi	r22, 0xB0	; 176
 3b2:	86 2f       	mov	r24, r22
 3b4:	80 68       	ori	r24, 0x80	; 128
 3b6:	57 df       	rcall	.-338    	; 0x266 <LCD_sendCommand>
 3b8:	08 95       	ret

000003ba <LCD_displayStringRowColumn>:
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	ea 01       	movw	r28, r20
 3c0:	ed df       	rcall	.-38     	; 0x39c <LCD_goToRowColumn>
 3c2:	ce 01       	movw	r24, r28
 3c4:	dd df       	rcall	.-70     	; 0x380 <LCD_displayString>
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <LCD_clearScreen>:



void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	4b df       	rcall	.-362    	; 0x266 <LCD_sendCommand>
 3d0:	08 95       	ret

000003d2 <main>:
char password[maxchar];
char storedpass[20];
int main(void)
{
	//init INT 0 for keypad
	cli();
 3d2:	f8 94       	cli
	//set bits ISC00,01 for rising edge int0 and PD2 as input
	CLEAR_BIT(DDRD,PD2);
 3d4:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(MCUCR,ISC00);
 3d6:	85 b7       	in	r24, 0x35	; 53
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC01);
 3dc:	85 b7       	in	r24, 0x35	; 53
 3de:	82 60       	ori	r24, 0x02	; 2
 3e0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(GICR,INT0);
 3e2:	8b b7       	in	r24, 0x3b	; 59
 3e4:	80 64       	ori	r24, 0x40	; 64
 3e6:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GIFR,INTF0); // clear flag by setting 1 to it
 3e8:	8a b7       	in	r24, 0x3a	; 58
 3ea:	80 64       	ori	r24, 0x40	; 64
 3ec:	8a bf       	out	0x3a, r24	; 58
	sei();
 3ee:	78 94       	sei

	//set password length to EEPROM
	


	LCD_init();
 3f0:	78 df       	rcall	.-272    	; 0x2e2 <LCD_init>
	LCD_displayString("Initiate lock");
 3f2:	84 e8       	ldi	r24, 0x84	; 132
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	c4 df       	rcall	.-120    	; 0x380 <LCD_displayString>
	

	initpassword();
 3f8:	af de       	rcall	.-674    	; 0x158 <initpassword>
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <main+0x28>

000003fc <__vector_1>:



// ISR for INT0 when keypad pressed
ISR(INT0_vect)
{
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	2f 93       	push	r18
 408:	3f 93       	push	r19
 40a:	4f 93       	push	r20
 40c:	5f 93       	push	r21
 40e:	6f 93       	push	r22
 410:	7f 93       	push	r23
 412:	8f 93       	push	r24
 414:	9f 93       	push	r25
 416:	af 93       	push	r26
 418:	bf 93       	push	r27
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
	LCD_clearScreen();
 422:	d4 df       	rcall	.-88     	; 0x3cc <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"psswrd is:");
 424:	42 e9       	ldi	r20, 0x92	; 146
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	c6 df       	rcall	.-116    	; 0x3ba <LCD_displayStringRowColumn>
	un.chr=KeyPad_getPressedKey();
 42e:	ec de       	rcall	.-552    	; 0x208 <KeyPad_getPressedKey>
 430:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <un>
	
	if ('#'==un.chr) // request password compare
 434:	83 32       	cpi	r24, 0x23	; 35
 436:	09 f0       	breq	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 438:	58 c0       	rjmp	.+176    	; 0x4ea <__stack+0x8b>
	{
		LCD_goToRowColumn(1,0);
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	ae df       	rcall	.-164    	; 0x39c <LCD_goToRowColumn>
		LCD_displayString("checking password");
 440:	8d e9       	ldi	r24, 0x9D	; 157
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	9d df       	rcall	.-198    	; 0x380 <LCD_displayString>
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	80 e7       	ldi	r24, 0x70	; 112
 44a:	92 e0       	ldi	r25, 0x02	; 2
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 456:	00 00       	nop
		_delay_ms(100);
		un.x=0; //clear flag for password testing
 458:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <un+0x1>
 45c:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <un>
		get_stored_password((uint8_t*)storedpass);
 460:	82 ee       	ldi	r24, 0xE2	; 226
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	62 de       	rcall	.-828    	; 0x12a <get_stored_password>
		LCD_displayString(storedpass);
 466:	82 ee       	ldi	r24, 0xE2	; 226
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	8a df       	rcall	.-236    	; 0x380 <LCD_displayString>
		LCD_clearScreen();
 46c:	af df       	rcall	.-162    	; 0x3cc <LCD_clearScreen>
		if ( strlen(storedpass) == strlen(password) )
 46e:	e2 ee       	ldi	r30, 0xE2	; 226
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	01 90       	ld	r0, Z+
 474:	00 20       	and	r0, r0
 476:	e9 f7       	brne	.-6      	; 0x472 <__stack+0x13>
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	cf 01       	movw	r24, r30
 47c:	82 5e       	subi	r24, 0xE2	; 226
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	ee ec       	ldi	r30, 0xCE	; 206
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	01 90       	ld	r0, Z+
 486:	00 20       	and	r0, r0
 488:	e9 f7       	brne	.-6      	; 0x484 <__stack+0x25>
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	ee 5c       	subi	r30, 0xCE	; 206
 48e:	f0 40       	sbci	r31, 0x00	; 0
 490:	8e 17       	cp	r24, r30
 492:	9f 07       	cpc	r25, r31
 494:	a1 f4       	brne	.+40     	; 0x4be <__stack+0x5f>
		{
			un.x++;
 496:	e6 ef       	ldi	r30, 0xF6	; 246
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	c0 81       	ld	r28, Z
 49c:	d1 81       	ldd	r29, Z+1	; 0x01
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	91 83       	std	Z+1, r25	; 0x01
 4a4:	80 83       	st	Z, r24
			if ( 0 == strcmp(password,storedpass) )
 4a6:	62 ee       	ldi	r22, 0xE2	; 226
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	8e ec       	ldi	r24, 0xCE	; 206
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	48 d0       	rcall	.+144    	; 0x540 <strcmp>
 4b0:	89 2b       	or	r24, r25
 4b2:	29 f4       	brne	.+10     	; 0x4be <__stack+0x5f>
			{
				un.x++;
 4b4:	22 96       	adiw	r28, 0x02	; 2
 4b6:	d0 93 f7 00 	sts	0x00F7, r29	; 0x8000f7 <un+0x1>
 4ba:	c0 93 f6 00 	sts	0x00F6, r28	; 0x8000f6 <un>
			}
		}
		
		if ( 2 == un.x )
 4be:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <un>
 4c2:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <un+0x1>
 4c6:	02 97       	sbiw	r24, 0x02	; 2
 4c8:	29 f4       	brne	.+10     	; 0x4d4 <__stack+0x75>
		{
			LCD_clearScreen();
 4ca:	80 df       	rcall	.-256    	; 0x3cc <LCD_clearScreen>
			LCD_displayString("opening gate");
 4cc:	8f ea       	ldi	r24, 0xAF	; 175
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	57 df       	rcall	.-338    	; 0x380 <LCD_displayString>
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__stack+0x7d>
		}
		else
		{
			LCD_clearScreen();
 4d4:	7b df       	rcall	.-266    	; 0x3cc <LCD_clearScreen>
			LCD_displayString("wrong password");
 4d6:	8c eb       	ldi	r24, 0xBC	; 188
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	52 df       	rcall	.-348    	; 0x380 <LCD_displayString>
		}
		
		
		//reset password to empty
		passitr=0;
 4dc:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__data_end+0x1>
 4e0:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
		password[passitr]='\0';
 4e4:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <password>
 4e8:	18 c0       	rjmp	.+48     	; 0x51a <__stack+0xbb>
		
	}
	else // continue password inserting.
	{
		password[passitr++]=un.chr;
 4ea:	40 91 cc 00 	lds	r20, 0x00CC	; 0x8000cc <__data_end>
 4ee:	50 91 cd 00 	lds	r21, 0x00CD	; 0x8000cd <__data_end+0x1>
 4f2:	9a 01       	movw	r18, r20
 4f4:	2f 5f       	subi	r18, 0xFF	; 255
 4f6:	3f 4f       	sbci	r19, 0xFF	; 255
 4f8:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__data_end+0x1>
 4fc:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__data_end>
 500:	fa 01       	movw	r30, r20
 502:	e2 53       	subi	r30, 0x32	; 50
 504:	ff 4f       	sbci	r31, 0xFF	; 255
 506:	80 83       	st	Z, r24
		password[passitr]='\0';
 508:	f9 01       	movw	r30, r18
 50a:	e2 53       	subi	r30, 0x32	; 50
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	10 82       	st	Z, r1
		LCD_displayStringRowColumn(0,10,password);
 510:	4e ec       	ldi	r20, 0xCE	; 206
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	6a e0       	ldi	r22, 0x0A	; 10
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	50 df       	rcall	.-352    	; 0x3ba <LCD_displayStringRowColumn>
	}
	
 51a:	ff 91       	pop	r31
 51c:	ef 91       	pop	r30
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	7f 91       	pop	r23
 52c:	6f 91       	pop	r22
 52e:	5f 91       	pop	r21
 530:	4f 91       	pop	r20
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <strcmp>:
 540:	fb 01       	movw	r30, r22
 542:	dc 01       	movw	r26, r24
 544:	8d 91       	ld	r24, X+
 546:	01 90       	ld	r0, Z+
 548:	80 19       	sub	r24, r0
 54a:	01 10       	cpse	r0, r1
 54c:	d9 f3       	breq	.-10     	; 0x544 <strcmp+0x4>
 54e:	99 0b       	sbc	r25, r25
 550:	08 95       	ret

00000552 <_exit>:
 552:	f8 94       	cli

00000554 <__stop_program>:
 554:	ff cf       	rjmp	.-2      	; 0x554 <__stop_program>
